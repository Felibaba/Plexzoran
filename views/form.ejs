<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= templateName || 'Form' %></title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Inter', sans-serif;
      background: <%= theme === 'dark' ? '#1a1f2e' : '#f8f9fa' %>;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      padding: 40px 20px 20px;
      box-sizing: border-box;
    }
    .login-container {
      background: <%= theme === 'dark' ? '#2f3b5a' : 'white' %>;
      padding: 24px;
      border-radius: 16px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, <%= theme === 'dark' ? '0.3' : '0.1' %>);
      width: 320px;
      min-height: <%= minHeight || '300px' %>;
      text-align: center;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      gap: 16px;
    }
    .login-container h2 {
      font-size: 1.8rem;
      font-weight: 700;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
      margin: -4px 0 16px;
    }
    .login-container p {
      font-size: 0.9rem;
      font-weight: 400;
      color: <%= subheaderColor || '#555555' %>;
      margin: 0 0 16px;
    }
    .login-container input {
      width: 100%;
      padding: 14px;
      margin: 8px 0;
      border-radius: 8px;
      font-size: 0.95rem;
      box-sizing: border-box;
      border: none;
      box-shadow: <%= borderShadow || '0 0 0 2px #000000' %>;
      background: <%= theme === 'dark' ? '#3b4a6b' : '#f8f9fa' %>;
      color: <%= theme === 'dark' ? '#f8f9fa' : '#333333' %>;
    }
    .login-container input::placeholder {
      color: <%= theme === 'dark' ? '#b0b8cc' : '#999999' %>;
    }
    .login-container input:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(0, 183, 255, 0.3);
      background: <%= theme === 'dark' ? '#3b4a6b' : '#ffffff' %>;
    }
    .login-container button {
      width: 100%;
      padding: 16px;
      margin: 20px 0 0;
      border-radius: 8px;
      font-size: 0.95rem;
      background: <%= buttonColor || 'linear-gradient(45deg, #00b7ff, #0078ff)' %>;
      color: <%= buttonTextColor || '#ffffff' %>;
      border: none;
      cursor: pointer;
      font-weight: 500;
      box-shadow: 0 2px 8px rgba(0, 183, 255, 0.3);
    }
    .login-container button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 183, 255, 0.5);
    }
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: <%= theme === 'dark' ? '#2f3b5a' : '#ffffff' %>;
      padding: 20px;
      border-radius: 12px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, <%= theme === 'dark' ? '0.4' : '0.15' %>);
      z-index: 1000;
      text-align: center;
      max-width: 300px;
      width: 90%;
    }
    .popup.show {
      display: block;
    }
    .popup h4 {
      font-size: 1rem;
      font-weight: 600;
      color: <%= theme === 'dark' ? '#f8f9fa' : '#333333' %>;
      margin-bottom: 12px;
    }
    .popup p {
      font-size: 0.85rem;
      color: <%= theme === 'dark' ? '#d1d5db' : '#555555' %>;
      margin-bottom: 12px;
    }
    .popup-close {
      position: absolute;
      top: 8px;
      right: 8px;
      background: none;
      border: none;
      font-size: 0.85rem;
      color: <%= theme === 'dark' ? '#f8f9fa' : '#555555' %>;
      cursor: pointer;
    }
    .popup-close:hover {
      color: #00b7ff;
    }
    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 999;
    }
    .overlay.show {
      display: block;
    }
    @media (max-width: 768px) {
      .login-container {
        width: 100%;
        max-width: 300px;
        padding: 20px;
      }
      .login-container h2 {
        font-size: 1.6rem;
      }
      .login-container p {
        font-size: 0.8rem;
      }
      .login-container input, .login-container button {
        padding: 12px;
        font-size: 0.9rem;
      }
      .popup {
        width: 80%;
        max-width: 280px;
        padding: 16px;
      }
    }
  </style>
</head>
<body>
  <div class="login-container">
    <h2 id="login-header"><%- headerHtml || 'Form Header' %></h2>
    <p id="login-subheader" style="color: <%= subheaderColor || '#555555' %>"><%= subheaderText || 'Please fill out the form' %></p>
    <div id="input-fields">
      <% (fields || []).forEach(field => { %>
        <input 
          type="<%= field.type || 'text' %>" 
          id="login-<%= field.id || 'unknown' %>" 
          placeholder="<%= field.placeholder || 'Enter value' %>" 
          style="box-shadow: <%= borderShadow || '0 0 0 2px #000000' %>;"
          <%= field.validation && field.validation.required ? 'required' : '' %>
        >
      <% }) %>
    </div>
    <button 
      id="login-button" 
      style="background: <%= buttonColor || 'linear-gradient(45deg, #00b7ff, #0078ff)' %>; color: <%= buttonTextColor || '#ffffff' %>;"
    >
      <%= buttonText || 'Submit' %>
    </button>
  </div>
  <div class="overlay" id="message-overlay"></div>
  <div class="popup" id="message-popup" role="alertdialog" aria-labelledby="message-popup-title">
    <button class="popup-close" id="message-popup-close" aria-label="Close message popup">&times;</button>
    <h4 id="message-popup-title">Message</h4>
    <p id="message-text"></p>
  </div>

  <script>
    (function() {
      console.log('Form script initialized');
      const loginButton = document.getElementById('login-button');
      const messagePopup = document.getElementById('message-popup');
      const messageOverlay = document.getElementById('message-overlay');
      const messagePopupClose = document.getElementById('message-popup-close');
      const messageText = document.getElementById('message-text');
      const inputFieldsContainer = document.getElementById('input-fields');

      if (!loginButton) {
        console.error('Button with id "login-button" not found');
        return;
      }
      if (!inputFieldsContainer) {
        console.error('Input fields container not found');
        return;
      }

      let templates = {};
      try {
        templates = JSON.parse('<%- templates || "{}" %>');
        console.log('Templates loaded:', templates);
      } catch (e) {
        console.error('Error parsing templates:', e);
        showMessagePopup('Error loading form configuration.');
        return;
      }

      function showMessagePopup(message) {
        if (messageText && messagePopup && messageOverlay) {
          messageText.textContent = message || 'An error occurred.';
          messagePopup.classList.add('show');
          messageOverlay.classList.add('show');
        } else {
          console.error('Popup elements not found');
          alert(message);
        }
      }

      function hideMessagePopup() {
        if (messagePopup && messageOverlay) {
          messagePopup.classList.remove('show');
          messageOverlay.classList.remove('show');
        }
      }

      function normalizeUrl(url) {
        if (!url) return null;
        url = url.trim();
        if (url.match(/^https?:\/\//)) return url;
        if (url.match(/\.[a-z]{2,}$/i)) return 'https://' + url;
        return null;
      }

      function checkFormFilled() {
        const inputs = inputFieldsContainer.querySelectorAll('input');
        const templateFields = templates['<%= template || "sign-in" %>']?.fields || [];

        for (let input of inputs) {
          const value = input.value.trim();
          const fieldId = input.id.replace('login-', '');
          const templateField = templateFields.find(field => field.id === fieldId);

          if (!value && templateField?.validation?.required) {
            showMessagePopup('Please fill all required fields.');
            return false;
          }

          if (templateField?.validation?.regex) {
            try {
              const regex = new RegExp(templateField.validation.regex);
              if (!regex.test(value)) {
                showMessagePopup(templateField.validation.errorMessage || 'Invalid input.');
                return false;
              }
            } catch (e) {
              console.error('Invalid regex for field:', fieldId, e);
              showMessagePopup('Validation error occurred.');
              return false;
            }
          }
        }
        return true;
      }

      async function submitFormData() {
        const inputs = inputFieldsContainer.querySelectorAll('input');
        const formData = {};
        inputs.forEach(input => {
          const fieldId = input.id.replace('login-', '');
          formData[fieldId] = input.value.trim();
        });

        try {
          const formId = '<%= formId || "" %>';
          if (!formId) {
            console.error('Form ID is missing');
            showMessagePopup('Form configuration error.');
            return false;
          }

          const response = await fetch(`/form/${formId}/submit`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
          });
          const result = await response.json();
          if (!response.ok) {
            console.error('Submission failed:', result.error);
            showMessagePopup(result.error || 'Failed to submit form.');
            return false;
          }
          console.log('Submission successful:', result);
          return true;
        } catch (error) {
          console.error('Error submitting form:', error);
          showMessagePopup('An error occurred while submitting the form.');
          return false;
        }
      }

      loginButton.addEventListener('click', async () => {
        console.log('Button clicked');
        try {
          if (!checkFormFilled()) return;
          const submitted = await submitFormData();
          if (!submitted) return;

          const action = '<%= buttonAction || "message" %>';
          const url = '<%= buttonUrl || "" %>';
          const message = '<%= buttonMessage || "Form submitted successfully!" %>';

          console.log('Button action:', { action, url, message });

          if (action === 'url') {
            const normalizedUrl = normalizeUrl(url);
            if (normalizedUrl) {
              console.log('Redirecting to:', normalizedUrl);
              window.location.href = normalizedUrl;
            } else {
              showMessagePopup('Invalid URL provided.');
            }
          } else if (action === 'message') {
            showMessagePopup(message);
          } else {
            console.error('Invalid button action:', action);
            showMessagePopup('Invalid button configuration.');
          }
        } catch (error) {
          console.error('Button click error:', error);
          showMessagePopup('An error occurred. Please try again.');
        }
      });

      if (messagePopupClose) {
        messagePopupClose.addEventListener('click', hideMessagePopup);
      }
      if (messageOverlay) {
        messageOverlay.addEventListener('click', hideMessagePopup);
      }
    })();
  </script>
</body>
</html>
