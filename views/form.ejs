<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= templateName %></title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      font-family: 'Inter', sans-serif;
      background: <%= theme === 'dark' ? '#1a1f2e' : '#f8f9fa' %>;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
    }
    .login-container {
      background: <%= theme === 'dark' ? '#24283b' : '#ffffff' %>;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      width: 100%;
      max-width: 400px;
      min-height: <%= minHeight %>;
      text-align: center;
      position: relative;
      margin: 1rem;
    }
    #login-header {
      font-size: 1.5rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    #login-subheader {
      font-size: 1rem;
      margin-bottom: 1.5rem;
      color: <%= subheaderColor %>;
    }
    #input-fields {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }
    input {
      padding: 0.75rem;
      font-size: 1rem;
      border: none;
      border-radius: 4px;
      background: <%= theme === 'dark' ? '#2f3542' : '#f1f3f5' %>;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
      box-shadow: <%= borderShadow %>;
      outline: none;
      width: 100%;
    }
    input::placeholder {
      color: <%= theme === 'dark' ? '#a4b0be' : '#868e96' %>;
    }
    #login-button {
      padding: 0.75rem;
      font-size: 1rem;
      font-weight: 500;
      border: none;
      border-radius: 4px;
      background: <%= buttonColor %>;
      color: <%= buttonTextColor %>;
      cursor: pointer;
      transition: background 0.3s ease;
      width: 100%;
    }
    #login-button:hover {
      opacity: 0.9;
    }
    .overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
    }
    .popup {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: <%= theme === 'dark' ? '#24283b' : '#ffffff' %>;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
      z-index: 1001;
      max-width: 90%;
      width: 400px;
      text-align: center;
    }
    .popup-close {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      background: none;
      border: none;
      font-size: 1.5rem;
      cursor: pointer;
      color: <%= theme === 'dark' ? '#ffffff' : '#000000' %>;
    }
    #message-popup-title {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
    }
    #message-text {
      font-size: 1rem;
      color: <%= theme === 'dark' ? '#d1d5db' : '#555555' %>;
    }
    @media (max-width: 480px) {
      .login-container {
        padding: 1.5rem;
        margin: 0.5rem;
      }
      #login-header {
        font-size: 1.25rem;
      }
      #login-subheader {
        font-size: 0.875rem;
      }
      input, #login-button {
        font-size: 0.875rem;
        padding: 0.6rem;
      }
      .popup {
        width: 90%;
        padding: 1rem;
      }
    }
  </style>
</head>
<body>
  <div class="login-container">
    <h2 id="login-header"><%- headerHtml %></h2>
    <p id="login-subheader" style="color: <%= subheaderColor %>"><%= subheaderText %></p>
    <div id="input-fields">
      <% fields.forEach(field => { %>
        <input type="<%= field.type %>" id="login-<%= field.id %>" placeholder="<%= field.placeholder %>" style="box-shadow: <%= borderShadow %>;">
      <% }) %>
    </div>
    <button id="login-button" style="background: <%= buttonColor %>; color: <%= buttonTextColor %>;"><%= buttonText %></button>
  </div>
  <div class="overlay" id="message-overlay"></div>
  <div class="popup" id="message-popup" role="alertdialog" aria-labelledby="message-popup-title">
    <button class="popup-close" id="message-popup-close" aria-label="Close message popup">&times;</button>
    <h4 id="message-popup-title">Message</h4>
    <p id="message-text"></p>
  </div>

  <script>
    const templates = <%- templates %>;

    const loginButton = document.getElementById('login-button');
    const messagePopup = document.getElementById('message-popup');
    const messageOverlay = document.getElementById('message-overlay');
    const messagePopupClose = document.getElementById('message-popup-close');
    const messageText = document.getElementById('message-text');
    const inputFieldsContainer = document.getElementById('input-fields');

    function normalizeUrl(url) {
      if (!url) return null;
      url = url.trim();
      if (url.match(/^https?:\/\//)) return url;
      if (url.match(/\.[a-z]{2,}$/i)) return `https://${url}`;
      return null;
    }

    function showMessage(message, isError = false) {
      messageText.textContent = message;
      messageText.style.color = isError ? '#ff4444' : '<%= theme === 'dark' ? '#d1d5db' : '#555555' %>';
      messagePopup.style.display = 'block';
      messageOverlay.style.display = 'block';
      messagePopup.focus();
    }

    function hideMessage() {
      messagePopup.style.display = 'none';
      messageOverlay.style.display = 'none';
      messageText.textContent = '';
    }

    messagePopupClose.addEventListener('click', hideMessage);
    messageOverlay.addEventListener('click', hideMessage);

    loginButton.addEventListener('click', async () => {
      const formId = '<%= formId %>';
      const template = templates['<%= template %>'] || templates['sign-in'];
      const formData = {};
      let hasError = false;
      let errorMessage = '';

      inputFieldsContainer.querySelectorAll('input').forEach(input => {
        const fieldId = input.id.replace('login-', '');
        const value = input.value.trim();
        formData[fieldId] = value;

        const field = template.fields.find(f => f.id === fieldId);
        if (field && field.validation) {
          if (field.validation.required && !value) {
            hasError = true;
            errorMessage = field.validation.errorMessage || `${field.placeholder} is required.`;
          } else if (field.validation.regex && value) {
            const regex = new RegExp(field.validation.regex);
            if (!regex.test(value)) {
              hasError = true;
              errorMessage = field.validation.errorMessage || `Invalid ${field.placeholder.toLowerCase()}.`;
            }
          }
        }
      });

      if (hasError) {
        showMessage(errorMessage, true);
        return;
      }

      try {
        const response = await fetch(`/form/${formId}/submit`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(formData)
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || 'Failed to submit form');
        }

        if ('<%= buttonAction %>' === 'message') {
          showMessage('<%= buttonMessage %>');
        } else if ('<%= buttonAction %>' === 'url' && '<%= buttonUrl %>') {
          const normalizedUrl = normalizeUrl('<%= buttonUrl %>');
          if (normalizedUrl) {
            window.location.href = normalizedUrl;
          } else {
            showMessage('Invalid redirect URL.', true);
          }
        } else {
          showMessage('Form submitted successfully!');
        }
      } catch (error) {
        console.error('Submission error:', error.message);
        showMessage(error.message, true);
      }
    });
  </script>
</body>
</html>
